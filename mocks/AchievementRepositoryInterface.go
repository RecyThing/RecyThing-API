// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/achievement/entity"

	mock "github.com/stretchr/testify/mock"
)

// AchievementRepositoryInterface is an autogenerated mock type for the AchievementRepositoryInterface type
type AchievementRepositoryInterface struct {
	mock.Mock
}

// FindById provides a mock function with given fields: id
func (_m *AchievementRepositoryInterface) FindById(id int) (entity.AchievementCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 entity.AchievementCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entity.AchievementCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entity.AchievementCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.AchievementCore)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAchievement provides a mock function with given fields:
func (_m *AchievementRepositoryInterface) GetAllAchievement() ([]entity.AchievementCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAchievement")
	}

	var r0 []entity.AchievementCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.AchievementCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.AchievementCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AchievementCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, point
func (_m *AchievementRepositoryInterface) UpdateById(id int, point int) error {
	ret := _m.Called(id, point)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, point)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAchievementRepositoryInterface creates a new instance of AchievementRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAchievementRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AchievementRepositoryInterface {
	mock := &AchievementRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
