// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/community/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	pagination "recything/utils/pagination"
)

// CommunityRepositoryInterface is an autogenerated mock type for the CommunityRepositoryInterface type
type CommunityRepositoryInterface struct {
	mock.Mock
}

// CreateCommunity provides a mock function with given fields: image, data
func (_m *CommunityRepositoryInterface) CreateCommunity(image *multipart.FileHeader, data entity.CommunityCore) error {
	ret := _m.Called(image, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommunity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, entity.CommunityCore) error); ok {
		r0 = rf(image, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEvent provides a mock function with given fields: communityId, eventInput, image
func (_m *CommunityRepositoryInterface) CreateEvent(communityId string, eventInput entity.CommunityEventCore, image *multipart.FileHeader) error {
	ret := _m.Called(communityId, eventInput, image)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.CommunityEventCore, *multipart.FileHeader) error); ok {
		r0 = rf(communityId, eventInput, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommunityById provides a mock function with given fields: id
func (_m *CommunityRepositoryInterface) DeleteCommunityById(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommunityById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: communityId, eventId
func (_m *CommunityRepositoryInterface) DeleteEvent(communityId string, eventId string) error {
	ret := _m.Called(communityId, eventId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(communityId, eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCommunity provides a mock function with given fields: page, limit, search
func (_m *CommunityRepositoryInterface) GetAllCommunity(page int, limit int, search string) ([]entity.CommunityCore, pagination.PageInfo, int, error) {
	ret := _m.Called(page, limit, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCommunity")
	}

	var r0 []entity.CommunityCore
	var r1 pagination.PageInfo
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]entity.CommunityCore, pagination.PageInfo, int, error)); ok {
		return rf(page, limit, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []entity.CommunityCore); ok {
		r0 = rf(page, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CommunityCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, search)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) int); ok {
		r2 = rf(page, limit, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, string) error); ok {
		r3 = rf(page, limit, search)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetByName provides a mock function with given fields: name
func (_m *CommunityRepositoryInterface) GetByName(name string) (entity.CommunityCore, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 entity.CommunityCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.CommunityCore, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) entity.CommunityCore); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(entity.CommunityCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunityById provides a mock function with given fields: id
func (_m *CommunityRepositoryInterface) GetCommunityById(id string) (entity.CommunityCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommunityById")
	}

	var r0 entity.CommunityCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.CommunityCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.CommunityCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.CommunityCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountByStatus provides a mock function with given fields: status, communityid, search
func (_m *CommunityRepositoryInterface) GetCountByStatus(status string, communityid string, search string) (int64, error) {
	ret := _m.Called(status, communityid, search)

	if len(ret) == 0 {
		panic("no return value specified for GetCountByStatus")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (int64, error)); ok {
		return rf(status, communityid, search)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) int64); ok {
		r0 = rf(status, communityid, search)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(status, communityid, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAllEvent provides a mock function with given fields: status, page, limit, search, communityId
func (_m *CommunityRepositoryInterface) ReadAllEvent(status string, page int, limit int, search string, communityId string) ([]entity.CommunityEventCore, pagination.PageInfo, pagination.CountEventInfo, error) {
	ret := _m.Called(status, page, limit, search, communityId)

	if len(ret) == 0 {
		panic("no return value specified for ReadAllEvent")
	}

	var r0 []entity.CommunityEventCore
	var r1 pagination.PageInfo
	var r2 pagination.CountEventInfo
	var r3 error
	if rf, ok := ret.Get(0).(func(string, int, int, string, string) ([]entity.CommunityEventCore, pagination.PageInfo, pagination.CountEventInfo, error)); ok {
		return rf(status, page, limit, search, communityId)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, string, string) []entity.CommunityEventCore); ok {
		r0 = rf(status, page, limit, search, communityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CommunityEventCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, string, string) pagination.PageInfo); ok {
		r1 = rf(status, page, limit, search, communityId)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(string, int, int, string, string) pagination.CountEventInfo); ok {
		r2 = rf(status, page, limit, search, communityId)
	} else {
		r2 = ret.Get(2).(pagination.CountEventInfo)
	}

	if rf, ok := ret.Get(3).(func(string, int, int, string, string) error); ok {
		r3 = rf(status, page, limit, search, communityId)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ReadEvent provides a mock function with given fields: communityId, eventId
func (_m *CommunityRepositoryInterface) ReadEvent(communityId string, eventId string) (entity.CommunityEventCore, error) {
	ret := _m.Called(communityId, eventId)

	if len(ret) == 0 {
		panic("no return value specified for ReadEvent")
	}

	var r0 entity.CommunityEventCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.CommunityEventCore, error)); ok {
		return rf(communityId, eventId)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.CommunityEventCore); ok {
		r0 = rf(communityId, eventId)
	} else {
		r0 = ret.Get(0).(entity.CommunityEventCore)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(communityId, eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommunityById provides a mock function with given fields: id, image, data
func (_m *CommunityRepositoryInterface) UpdateCommunityById(id string, image *multipart.FileHeader, data entity.CommunityCore) error {
	ret := _m.Called(id, image, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommunityById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *multipart.FileHeader, entity.CommunityCore) error); ok {
		r0 = rf(id, image, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEvent provides a mock function with given fields: communityId, eventId, eventInput, image
func (_m *CommunityRepositoryInterface) UpdateEvent(communityId string, eventId string, eventInput entity.CommunityEventCore, image *multipart.FileHeader) error {
	ret := _m.Called(communityId, eventId, eventInput, image)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, entity.CommunityEventCore, *multipart.FileHeader) error); ok {
		r0 = rf(communityId, eventId, eventInput, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommunityRepositoryInterface creates a new instance of CommunityRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommunityRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommunityRepositoryInterface {
	mock := &CommunityRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
