// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	userentity "recything/features/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// DailyPointRepositoryInterface is an autogenerated mock type for the DailyPointRepositoryInterface type
type DailyPointRepositoryInterface struct {
	mock.Mock
}

// DailyClaim provides a mock function with given fields: userId
func (_m *DailyPointRepositoryInterface) DailyClaim(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DailyClaim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClaimedDaily provides a mock function with given fields: userID
func (_m *DailyPointRepositoryInterface) GetAllClaimedDaily(userID string) ([]userentity.UserDailyPointsCore, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClaimedDaily")
	}

	var r0 []userentity.UserDailyPointsCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]userentity.UserDailyPointsCore, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []userentity.UserDailyPointsCore); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UserDailyPointsCore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHistoryPoint provides a mock function with given fields: userID
func (_m *DailyPointRepositoryInterface) GetAllHistoryPoint(userID string) ([]map[string]interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllHistoryPoint")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]map[string]interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []map[string]interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdHistoryPoint provides a mock function with given fields: userID, idTransaction
func (_m *DailyPointRepositoryInterface) GetByIdHistoryPoint(userID string, idTransaction string) (map[string]interface{}, error) {
	ret := _m.Called(userID, idTransaction)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdHistoryPoint")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return rf(userID, idTransaction)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(userID, idTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, idTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostWeekly provides a mock function with given fields:
func (_m *DailyPointRepositoryInterface) PostWeekly() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostWeekly")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDailyPointRepositoryInterface creates a new instance of DailyPointRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDailyPointRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DailyPointRepositoryInterface {
	mock := &DailyPointRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
