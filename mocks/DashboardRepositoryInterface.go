// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	dashboard "recything/utils/dashboard"

	entity "recything/features/report/entity"

	mock "github.com/stretchr/testify/mock"

	trash_exchangeentity "recything/features/trash_exchange/entity"

	userentity "recything/features/user/entity"

	voucherentity "recything/features/voucher/entity"
)

// DashboardRepositoryInterface is an autogenerated mock type for the DashboardRepositoryInterface type
type DashboardRepositoryInterface struct {
	mock.Mock
}

// CountCategory provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountCategory() ([]entity.ReportCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountCategory")
	}

	var r0 []entity.ReportCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountCategoryYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountCategoryYear() ([]entity.ReportCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountCategoryYear")
	}

	var r0 []entity.ReportCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountReports provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountReports() ([]entity.ReportCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountReports")
	}

	var r0 []entity.ReportCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountReportsYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountReportsYear() ([]entity.ReportCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountReportsYear")
	}

	var r0 []entity.ReportCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountTrashExchanges provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountTrashExchanges() ([]trash_exchangeentity.TrashExchangeCore, []trash_exchangeentity.TrashExchangeCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountTrashExchanges")
	}

	var r0 []trash_exchangeentity.TrashExchangeCore
	var r1 []trash_exchangeentity.TrashExchangeCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]trash_exchangeentity.TrashExchangeCore, []trash_exchangeentity.TrashExchangeCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []trash_exchangeentity.TrashExchangeCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trash_exchangeentity.TrashExchangeCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []trash_exchangeentity.TrashExchangeCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]trash_exchangeentity.TrashExchangeCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountTrashExchangesIncome provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountTrashExchangesIncome() (dashboard.TrashIncomeStats, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountTrashExchangesIncome")
	}

	var r0 dashboard.TrashIncomeStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (dashboard.TrashIncomeStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dashboard.TrashIncomeStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dashboard.TrashIncomeStats)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTrashExchangesIncomeYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountTrashExchangesIncomeYear() (dashboard.TrashIncomeStats, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountTrashExchangesIncomeYear")
	}

	var r0 dashboard.TrashIncomeStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (dashboard.TrashIncomeStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dashboard.TrashIncomeStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dashboard.TrashIncomeStats)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTrashExchangesYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountTrashExchangesYear() ([]trash_exchangeentity.TrashExchangeCore, []trash_exchangeentity.TrashExchangeCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountTrashExchangesYear")
	}

	var r0 []trash_exchangeentity.TrashExchangeCore
	var r1 []trash_exchangeentity.TrashExchangeCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]trash_exchangeentity.TrashExchangeCore, []trash_exchangeentity.TrashExchangeCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []trash_exchangeentity.TrashExchangeCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]trash_exchangeentity.TrashExchangeCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []trash_exchangeentity.TrashExchangeCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]trash_exchangeentity.TrashExchangeCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountUserActive provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountUserActive() ([]userentity.UsersCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountUserActive")
	}

	var r0 []userentity.UsersCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountUserActiveLastMonth provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountUserActiveLastMonth() ([]userentity.UsersCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountUserActiveLastMonth")
	}

	var r0 []userentity.UsersCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountUserActiveLastYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountUserActiveLastYear() ([]userentity.UsersCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountUserActiveLastYear")
	}

	var r0 []userentity.UsersCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountUserActiveThisYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountUserActiveThisYear() ([]userentity.UsersCore, []entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountUserActiveThisYear")
	}

	var r0 []userentity.UsersCore
	var r1 []entity.ReportCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, []entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []entity.ReportCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountVoucherExchanges provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountVoucherExchanges() ([]voucherentity.ExchangeVoucherCore, []voucherentity.ExchangeVoucherCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountVoucherExchanges")
	}

	var r0 []voucherentity.ExchangeVoucherCore
	var r1 []voucherentity.ExchangeVoucherCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]voucherentity.ExchangeVoucherCore, []voucherentity.ExchangeVoucherCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []voucherentity.ExchangeVoucherCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]voucherentity.ExchangeVoucherCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []voucherentity.ExchangeVoucherCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]voucherentity.ExchangeVoucherCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountVoucherExchangesYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountVoucherExchangesYear() ([]voucherentity.ExchangeVoucherCore, []voucherentity.ExchangeVoucherCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountVoucherExchangesYear")
	}

	var r0 []voucherentity.ExchangeVoucherCore
	var r1 []voucherentity.ExchangeVoucherCore
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]voucherentity.ExchangeVoucherCore, []voucherentity.ExchangeVoucherCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []voucherentity.ExchangeVoucherCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]voucherentity.ExchangeVoucherCore)
		}
	}

	if rf, ok := ret.Get(1).(func() []voucherentity.ExchangeVoucherCore); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]voucherentity.ExchangeVoucherCore)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CountWeeklyTrashAndScalaTypes provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountWeeklyTrashAndScalaTypes() ([]entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountWeeklyTrashAndScalaTypes")
	}

	var r0 []entity.ReportCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountWeeklyTrashAndScalaTypesYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) CountWeeklyTrashAndScalaTypesYear() ([]entity.ReportCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountWeeklyTrashAndScalaTypesYear")
	}

	var r0 []entity.ReportCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.ReportCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.ReportCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRanking provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) GetUserRanking() ([]userentity.UsersCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserRanking")
	}

	var r0 []userentity.UsersCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRankingYear provides a mock function with given fields:
func (_m *DashboardRepositoryInterface) GetUserRankingYear() ([]userentity.UsersCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserRankingYear")
	}

	var r0 []userentity.UsersCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]userentity.UsersCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []userentity.UsersCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userentity.UsersCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDashboardRepositoryInterface creates a new instance of DashboardRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardRepositoryInterface {
	mock := &DashboardRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
