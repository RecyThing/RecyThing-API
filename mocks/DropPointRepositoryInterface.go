// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/drop-point/entity"

	mock "github.com/stretchr/testify/mock"

	pagination "recything/utils/pagination"
)

// DropPointRepositoryInterface is an autogenerated mock type for the DropPointRepositoryInterface type
type DropPointRepositoryInterface struct {
	mock.Mock
}

// CreateDropPoint provides a mock function with given fields: data
func (_m *DropPointRepositoryInterface) CreateDropPoint(data entity.DropPointsCore) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateDropPoint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.DropPointsCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDropPointById provides a mock function with given fields: id
func (_m *DropPointRepositoryInterface) DeleteDropPointById(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDropPointById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllDropPoint provides a mock function with given fields: page, limit, search
func (_m *DropPointRepositoryInterface) GetAllDropPoint(page int, limit int, search string) ([]entity.DropPointsCore, pagination.PageInfo, int, error) {
	ret := _m.Called(page, limit, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAllDropPoint")
	}

	var r0 []entity.DropPointsCore
	var r1 pagination.PageInfo
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]entity.DropPointsCore, pagination.PageInfo, int, error)); ok {
		return rf(page, limit, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []entity.DropPointsCore); ok {
		r0 = rf(page, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DropPointsCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, search)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) int); ok {
		r2 = rf(page, limit, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, string) error); ok {
		r3 = rf(page, limit, search)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetDropPointById provides a mock function with given fields: id
func (_m *DropPointRepositoryInterface) GetDropPointById(id string) (entity.DropPointsCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetDropPointById")
	}

	var r0 entity.DropPointsCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DropPointsCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DropPointsCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.DropPointsCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDropPointByName provides a mock function with given fields: name
func (_m *DropPointRepositoryInterface) GetDropPointByName(name string) (entity.DropPointsCore, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetDropPointByName")
	}

	var r0 entity.DropPointsCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DropPointsCore, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DropPointsCore); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(entity.DropPointsCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDropPointById provides a mock function with given fields: id, data
func (_m *DropPointRepositoryInterface) UpdateDropPointById(id string, data entity.DropPointsCore) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDropPointById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.DropPointsCore) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDropPointRepositoryInterface creates a new instance of DropPointRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDropPointRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DropPointRepositoryInterface {
	mock := &DropPointRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
