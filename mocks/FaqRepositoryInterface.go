// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/faq/entity"

	mock "github.com/stretchr/testify/mock"
)

// FaqRepositoryInterface is an autogenerated mock type for the FaqRepositoryInterface type
type FaqRepositoryInterface struct {
	mock.Mock
}

// GetFaqs provides a mock function with given fields:
func (_m *FaqRepositoryInterface) GetFaqs() ([]entity.FaqCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFaqs")
	}

	var r0 []entity.FaqCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.FaqCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.FaqCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FaqCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFaqsById provides a mock function with given fields: id
func (_m *FaqRepositoryInterface) GetFaqsById(id uint) (entity.FaqCore, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFaqsById")
	}

	var r0 entity.FaqCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (entity.FaqCore, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) entity.FaqCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.FaqCore)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFaqRepositoryInterface creates a new instance of FaqRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFaqRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FaqRepositoryInterface {
	mock := &FaqRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
