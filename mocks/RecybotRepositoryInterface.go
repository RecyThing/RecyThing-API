// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/recybot/entity"
	helper "recything/utils/helper"

	mock "github.com/stretchr/testify/mock"

	pagination "recything/utils/pagination"
)

// RecybotRepositoryInterface is an autogenerated mock type for the RecybotRepositoryInterface type
type RecybotRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: recybot
func (_m *RecybotRepositoryInterface) Create(recybot entity.RecybotCore) (entity.RecybotCore, error) {
	ret := _m.Called(recybot)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.RecybotCore
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.RecybotCore) (entity.RecybotCore, error)); ok {
		return rf(recybot)
	}
	if rf, ok := ret.Get(0).(func(entity.RecybotCore) entity.RecybotCore); ok {
		r0 = rf(recybot)
	} else {
		r0 = ret.Get(0).(entity.RecybotCore)
	}

	if rf, ok := ret.Get(1).(func(entity.RecybotCore) error); ok {
		r1 = rf(recybot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: idData
func (_m *RecybotRepositoryInterface) Delete(idData string) error {
	ret := _m.Called(idData)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, limit, filter, search
func (_m *RecybotRepositoryInterface) FindAll(page int, limit int, filter string, search string) ([]entity.RecybotCore, pagination.PageInfo, helper.CountPrompt, error) {
	ret := _m.Called(page, limit, filter, search)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.RecybotCore
	var r1 pagination.PageInfo
	var r2 helper.CountPrompt
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]entity.RecybotCore, pagination.PageInfo, helper.CountPrompt, error)); ok {
		return rf(page, limit, filter, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []entity.RecybotCore); ok {
		r0 = rf(page, limit, filter, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RecybotCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, filter, search)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) helper.CountPrompt); ok {
		r2 = rf(page, limit, filter, search)
	} else {
		r2 = ret.Get(2).(helper.CountPrompt)
	}

	if rf, ok := ret.Get(3).(func(int, int, string, string) error); ok {
		r3 = rf(page, limit, filter, search)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetAll provides a mock function with given fields:
func (_m *RecybotRepositoryInterface) GetAll() ([]entity.RecybotCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.RecybotCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.RecybotCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.RecybotCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RecybotCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: idData
func (_m *RecybotRepositoryInterface) GetById(idData string) (entity.RecybotCore, error) {
	ret := _m.Called(idData)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.RecybotCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.RecybotCore, error)); ok {
		return rf(idData)
	}
	if rf, ok := ret.Get(0).(func(string) entity.RecybotCore); ok {
		r0 = rf(idData)
	} else {
		r0 = ret.Get(0).(entity.RecybotCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountAllData provides a mock function with given fields: search, filter
func (_m *RecybotRepositoryInterface) GetCountAllData(search string, filter string) (helper.CountPrompt, error) {
	ret := _m.Called(search, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetCountAllData")
	}

	var r0 helper.CountPrompt
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (helper.CountPrompt, error)); ok {
		return rf(search, filter)
	}
	if rf, ok := ret.Get(0).(func(string, string) helper.CountPrompt); ok {
		r0 = rf(search, filter)
	} else {
		r0 = ret.Get(0).(helper.CountPrompt)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(search, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: idData, data
func (_m *RecybotRepositoryInterface) Update(idData string, data entity.RecybotCore) (entity.RecybotCore, error) {
	ret := _m.Called(idData, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.RecybotCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, entity.RecybotCore) (entity.RecybotCore, error)); ok {
		return rf(idData, data)
	}
	if rf, ok := ret.Get(0).(func(string, entity.RecybotCore) entity.RecybotCore); ok {
		r0 = rf(idData, data)
	} else {
		r0 = ret.Get(0).(entity.RecybotCore)
	}

	if rf, ok := ret.Get(1).(func(string, entity.RecybotCore) error); ok {
		r1 = rf(idData, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecybotRepositoryInterface creates a new instance of RecybotRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecybotRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecybotRepositoryInterface {
	mock := &RecybotRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
