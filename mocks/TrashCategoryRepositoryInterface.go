// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/trash_category/entity"

	mock "github.com/stretchr/testify/mock"

	pagination "recything/utils/pagination"
)

// TrashCategoryRepositoryInterface is an autogenerated mock type for the TrashCategoryRepositoryInterface type
type TrashCategoryRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *TrashCategoryRepositoryInterface) Create(data entity.TrashCategoryCore) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrashCategoryCore) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: idTrash
func (_m *TrashCategoryRepositoryInterface) Delete(idTrash string) error {
	ret := _m.Called(idTrash)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idTrash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, limit, search
func (_m *TrashCategoryRepositoryInterface) FindAll(page int, limit int, search string) ([]entity.TrashCategoryCore, pagination.PageInfo, int, error) {
	ret := _m.Called(page, limit, search)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.TrashCategoryCore
	var r1 pagination.PageInfo
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]entity.TrashCategoryCore, pagination.PageInfo, int, error)); ok {
		return rf(page, limit, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []entity.TrashCategoryCore); ok {
		r0 = rf(page, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrashCategoryCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, search)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) int); ok {
		r2 = rf(page, limit, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, string) error); ok {
		r3 = rf(page, limit, search)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindAllFetch provides a mock function with given fields:
func (_m *TrashCategoryRepositoryInterface) FindAllFetch() ([]entity.TrashCategoryCore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllFetch")
	}

	var r0 []entity.TrashCategoryCore
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.TrashCategoryCore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.TrashCategoryCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrashCategoryCore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: idTrash
func (_m *TrashCategoryRepositoryInterface) GetById(idTrash string) (entity.TrashCategoryCore, error) {
	ret := _m.Called(idTrash)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.TrashCategoryCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrashCategoryCore, error)); ok {
		return rf(idTrash)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrashCategoryCore); ok {
		r0 = rf(idTrash)
	} else {
		r0 = ret.Get(0).(entity.TrashCategoryCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idTrash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByType provides a mock function with given fields: trashType
func (_m *TrashCategoryRepositoryInterface) GetByType(trashType string) (entity.TrashCategoryCore, error) {
	ret := _m.Called(trashType)

	if len(ret) == 0 {
		panic("no return value specified for GetByType")
	}

	var r0 entity.TrashCategoryCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrashCategoryCore, error)); ok {
		return rf(trashType)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrashCategoryCore); ok {
		r0 = rf(trashType)
	} else {
		r0 = ret.Get(0).(entity.TrashCategoryCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(trashType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: search
func (_m *TrashCategoryRepositoryInterface) GetCount(search string) (int, error) {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: idTrash, data
func (_m *TrashCategoryRepositoryInterface) Update(idTrash string, data entity.TrashCategoryCore) (entity.TrashCategoryCore, error) {
	ret := _m.Called(idTrash, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.TrashCategoryCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, entity.TrashCategoryCore) (entity.TrashCategoryCore, error)); ok {
		return rf(idTrash, data)
	}
	if rf, ok := ret.Get(0).(func(string, entity.TrashCategoryCore) entity.TrashCategoryCore); ok {
		r0 = rf(idTrash, data)
	} else {
		r0 = ret.Get(0).(entity.TrashCategoryCore)
	}

	if rf, ok := ret.Get(1).(func(string, entity.TrashCategoryCore) error); ok {
		r1 = rf(idTrash, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTrashCategoryRepositoryInterface creates a new instance of TrashCategoryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrashCategoryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrashCategoryRepositoryInterface {
	mock := &TrashCategoryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
