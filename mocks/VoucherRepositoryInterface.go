// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "recything/features/voucher/entity"
	helper "recything/utils/helper"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	pagination "recything/utils/pagination"
)

// VoucherRepositoryInterface is an autogenerated mock type for the VoucherRepositoryInterface type
type VoucherRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: image, recybot
func (_m *VoucherRepositoryInterface) Create(image *multipart.FileHeader, recybot entity.VoucherCore) error {
	ret := _m.Called(image, recybot)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, entity.VoucherCore) error); ok {
		r0 = rf(image, recybot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExchangeVoucher provides a mock function with given fields: idUser, data
func (_m *VoucherRepositoryInterface) CreateExchangeVoucher(idUser string, data entity.ExchangeVoucherCore) error {
	ret := _m.Called(idUser, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateExchangeVoucher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.ExchangeVoucherCore) error); ok {
		r0 = rf(idUser, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: idVoucher
func (_m *VoucherRepositoryInterface) Delete(idVoucher string) error {
	ret := _m.Called(idVoucher)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(idVoucher)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, limit, search
func (_m *VoucherRepositoryInterface) GetAll(page int, limit int, search string) ([]entity.VoucherCore, pagination.PageInfo, int, error) {
	ret := _m.Called(page, limit, search)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.VoucherCore
	var r1 pagination.PageInfo
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]entity.VoucherCore, pagination.PageInfo, int, error)); ok {
		return rf(page, limit, search)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []entity.VoucherCore); ok {
		r0 = rf(page, limit, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.VoucherCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, search)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) int); ok {
		r2 = rf(page, limit, search)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int, string) error); ok {
		r3 = rf(page, limit, search)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetAllExchange provides a mock function with given fields: page, limit, search, filter
func (_m *VoucherRepositoryInterface) GetAllExchange(page int, limit int, search string, filter string) ([]entity.ExchangeVoucherCore, pagination.PageInfo, helper.CountExchangeVoucher, error) {
	ret := _m.Called(page, limit, search, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllExchange")
	}

	var r0 []entity.ExchangeVoucherCore
	var r1 pagination.PageInfo
	var r2 helper.CountExchangeVoucher
	var r3 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) ([]entity.ExchangeVoucherCore, pagination.PageInfo, helper.CountExchangeVoucher, error)); ok {
		return rf(page, limit, search, filter)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, string) []entity.ExchangeVoucherCore); ok {
		r0 = rf(page, limit, search, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ExchangeVoucherCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, string) pagination.PageInfo); ok {
		r1 = rf(page, limit, search, filter)
	} else {
		r1 = ret.Get(1).(pagination.PageInfo)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, string) helper.CountExchangeVoucher); ok {
		r2 = rf(page, limit, search, filter)
	} else {
		r2 = ret.Get(2).(helper.CountExchangeVoucher)
	}

	if rf, ok := ret.Get(3).(func(int, int, string, string) error); ok {
		r3 = rf(page, limit, search, filter)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetAllExchangeHistory provides a mock function with given fields: userID
func (_m *VoucherRepositoryInterface) GetAllExchangeHistory(userID string) ([]map[string]interface{}, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllExchangeHistory")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]map[string]interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []map[string]interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: idVoucher
func (_m *VoucherRepositoryInterface) GetById(idVoucher string) (entity.VoucherCore, error) {
	ret := _m.Called(idVoucher)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.VoucherCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.VoucherCore, error)); ok {
		return rf(idVoucher)
	}
	if rf, ok := ret.Get(0).(func(string) entity.VoucherCore); ok {
		r0 = rf(idVoucher)
	} else {
		r0 = ret.Get(0).(entity.VoucherCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idVoucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdExchange provides a mock function with given fields: idExchange
func (_m *VoucherRepositoryInterface) GetByIdExchange(idExchange string) (entity.ExchangeVoucherCore, error) {
	ret := _m.Called(idExchange)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdExchange")
	}

	var r0 entity.ExchangeVoucherCore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ExchangeVoucherCore, error)); ok {
		return rf(idExchange)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ExchangeVoucherCore); ok {
		r0 = rf(idExchange)
	} else {
		r0 = ret.Get(0).(entity.ExchangeVoucherCore)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idExchange)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdExchangeTransactions provides a mock function with given fields: userID, idTransaction
func (_m *VoucherRepositoryInterface) GetByIdExchangeTransactions(userID string, idTransaction string) (map[string]interface{}, error) {
	ret := _m.Called(userID, idTransaction)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdExchangeTransactions")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return rf(userID, idTransaction)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(userID, idTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, idTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCount provides a mock function with given fields: search
func (_m *VoucherRepositoryInterface) GetCount(search string) (int, error) {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(search)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: idVoucher, image, data
func (_m *VoucherRepositoryInterface) Update(idVoucher string, image *multipart.FileHeader, data entity.VoucherCore) error {
	ret := _m.Called(idVoucher, image, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *multipart.FileHeader, entity.VoucherCore) error); ok {
		r0 = rf(idVoucher, image, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusExchange provides a mock function with given fields: id, status
func (_m *VoucherRepositoryInterface) UpdateStatusExchange(id string, status string) error {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusExchange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVoucherRepositoryInterface creates a new instance of VoucherRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoucherRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoucherRepositoryInterface {
	mock := &VoucherRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
